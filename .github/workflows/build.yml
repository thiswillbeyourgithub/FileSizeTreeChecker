name: Build Python Script with PyInstaller

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]  # Add all OSes
    runs-on: ${{ matrix.os }}  # Use the matrix OS

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.7'

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -U pyinstaller
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # On macOS, install universal2 versions of dependencies
            export ARCHFLAGS="-arch x86_64 -arch arm64"
            pip install -U moviepy --no-binary :all:
            pip install -U pyclip --no-binary :all:
          else
            pip install -U moviepy
            pip install -U pyclip
          fi

      - name: Compile script with PyInstaller
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # On macOS, build universal2 binary that works on both Intel and Apple Silicon
            pyinstaller --onefile --name FileSizeTreeChecker FileSizeTreeChecker.py --argv-emulation --optimize 2 --target-architecture universal2 --clean
          else
            # On other platforms, use default architecture
            pyinstaller --onefile --name FileSizeTreeChecker FileSizeTreeChecker.py --argv-emulation --optimize 2 --clean
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: compiled-binary-${{ matrix.os }}  # Unique name per OS
          path: dist/
